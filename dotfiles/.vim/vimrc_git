" require vim-fugitive

fu! s:toggle_git()
  let bufname=bufname('fugitive:')
  let bufno = bufname->bufloaded()
  if bufno == 0
    exe 'vertical Git'
  else
    exe 'bd ' . bufname
  endif
endf
nmap <silent> <C-g> :call <SID>toggle_git()<CR>
nmap <silent> <Leader>gp :Git stash <bar> Git pull --rebase <bar> Git stash pop<CR>
nmap <silent> <Leader>gdf :Gvdiffsplit<SPACE>

fu! s:search_in_git(text)
  exe 'Gclog -S' . a:text . ' -- %'
  call feedkeys("/".a:text."\r")
endf
nmap <silent> <Leader>gss :call <SID>search_in_git(expand('<cword>'))<CR>

fu! s:git_tool_diff_a_commit()
  let cc = getline(1, 1)
  let a = split(cc[0])
  let cc = a[1]
  let pc = getline(2, 2)
  let a = split(pc[0])
  let pc = a[1]
  silent exe 'bd'
  silent exe '!git diff --name-status ' . pc . " " . cc . '>/tmp/.tmp.gitdiff'
  exe "tabnew"
  exe 'view /tmp/.tmp.gitdiff'
  call <SID>set_git_tool_diff_menu_2branch(pc, cc)
endf
nmap <silent> <Leader>gdc :call <SID>git_tool_diff_a_commit()<CR>

fu! s:goto_commint_and_find_this_change()
  let lineno = line('.')
  let cwd = getcwd()
  let file = expand('%p')
  let file = substitute(file, cwd, "", "")
  let file = substitute(file, "^/", "", "")
  let file = escape(file, "/")
  call feedkeys(" gc " . ":sleep 500m\<CR>" . " gdc " . "/" . file . "\<CR>" . "\<CR>" . lineno ."\<CR>")
endfunction
nmap <silent> <Leader>gfc :call <SID>goto_commint_and_find_this_change()<CR>

fu! s:git_tool_diff_branch(branch)
  let branch = a:branch
  if len(branch) == 0
    let branch = "HEAD"
  endif
  silent exe '!git diff --name-status "' . branch . '">/tmp/.tmp.gitdiff'
  exe "tabnew"
  exe 'view /tmp/.tmp.gitdiff'
  call <SID>set_git_tool_diff_menu_2branch(branch, "")
  if getline('.') != ''
    call feedkeys("\<CR>")
  endif
endf
command! -bar -bang -nargs=* -complete=customlist,fugitive#CompleteObject GitToolDiffBranch call <SID>git_tool_diff_branch(<q-args>)
nmap <silent> <Leader>gtd :GitToolDiffBranch<SPACE>

" diff two random branchs
fu! s:set_git_tool_diff_menu_2branch(abranch, bbranch)
  setlocal nomodifiable
  exe 'let b:abranch="' . a:abranch . '"'
  exe 'let b:bbranch="' . a:bbranch . '"'
  nmap <buffer> <silent> <leader>q :windo bd<CR>
  nmap <buffer> <silent> <CR> :call <SID>git_tool_diff_file_2branch_using_tab(getline('.'), b:abranch, b:bbranch)<CR>
  " nmap <buffer> <silent> <LeftRelease> :call git_tool_diff_file_2branch_in_same_tab(getline('.'), b:abranch, b:bbranch)<CR>
  nmap <buffer> <silent> <2-LeftMouse> :call <SID>git_tool_diff_file_2branch_using_tab(getline('.'), b:abranch, b:bbranch)<CR>
  let g:difflisttab = tabpagenr()
endf

fu! s:git_tool_diff_file_2branch_in_same_tab(change, abranch, bbranch)
  let height = 10
  if winnr('$') > 1
    let height = winheight(0)
    exe '2,3windo bd'
  endif
  let changes = split(a:change)
  let ct = changes[0]
  let ff = changes[1]
  " exe "belowright 80vsplit " . ff
  " exe "wincmd h | vertical resize 60 | setlocal winfixwidth | wincmd l"
  exe "belowright split " . ff
  exe "wincmd k | resize " . height . " | setlocal winfixwidth | wincmd j"
  exe "Gvdiffsplit " . a:abranch
  call <SID>setup_git_buffer_map()

  exe "wincmd l"
  if len(changes) == 3
    let ff = changes[2]
  endif
  exe "e " . ff
  if a:bbranch != ""
    exe "Gvdiffsplit " . a:bbranch
    exe "wincmd l | q"
  endif
  exe "2,3windo diffthis"
  call <SID>setup_git_buffer_map()
endf

fu! s:git_tool_diff_file_2branch_using_tab(change, abranch, bbranch)
  let changes = split(a:change)
  let ff = changes[1]
  exe "tabedit " . ff
  exe "Gvdiffsplit " . a:abranch
  call <SID>setup_git_buffer_map()

  exe "wincmd l"
  if len(changes) == 3
    let ff = changes[2]
  endif
  exe "e " . ff
  if a:bbranch != ""
    exe "Gvdiffsplit " . a:bbranch
    exe "wincmd l | q"
  endif
  exe "windo diffthis"
  call <SID>setup_git_buffer_map()
endf

fu! s:next_gtd_file()
  call feedkeys(" q")
  let tabno = g:difflisttab
  if line('.', win_getid(1, tabno)) == line('$', win_getid(1, tabno))
    call feedkeys("gg\<CR>")
  else
    call feedkeys("j\<CR>")
  endif
endf
fu! s:prev_gtd_file()
  call feedkeys(" q")
  let tabno = g:difflisttab
  if line('.', win_getid(1, tabno)) == 1
    call feedkeys("G\<CR>")
  else
    call feedkeys("k\<CR>")
  endif
endf
fu! s:setup_git_buffer_map()
  if winnr('$') > 2
    nmap <buffer> <silent> <leader>q :2,3windo bd<CR>
  else
    nmap <buffer> <silent> <leader>q :windo bd<CR>
  endif
  nmap <buffer> <silent> <CR> G
  nmap <buffer> <silent> <C-n> :call <SID>next_gtd_file()<CR>
  nmap <buffer> <silent> <C-p> :call <SID>prev_gtd_file()<CR>
endfunction
