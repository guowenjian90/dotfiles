" require vim-fugitive

fu! ToggleGit()
  let bufname=bufname('fugitive:')
  let bufno = bufname->bufloaded()
  if bufno == 0
    exe 'vertical Git'
  else
    exe 'bd ' . bufname
  endif
endf
nmap <silent>  <C-g> :call ToggleGit()<CR>
nmap <Leader>gdf :Gvdiffsplit<SPACE>

fu! SearchInGit(text)
  exe 'Gclog -S' . a:text . ' -- %'
  call feedkeys("/".a:text."\r")
endf
nmap <silent> <Leader>gss :call SearchInGit(expand('<cword>'))<CR>

fu! GitDiffToolACommmit()
  let cc = getline(1, 1)
  let a = split(cc[0])
  let cc = a[1]
  let pc = getline(2, 2)
  let a = split(pc[0])
  let pc = a[1]
  silent exe 'bd'
  silent exe '!git diff --name-status ' . pc . " " . cc . '>.tmp.gitdiff'
  exe "tabnew"
  exe 'view .tmp.gitdiff'
  call SetGitToolDiffMenu2Branch(cc, pc)
endf
fu! GoToCommitAndDiffThisFile()
  let lineno = line('.')
  let cwd = getcwd()
  let file = expand('%p')
  let file = substitute(file, cwd, "", "")
  let file = substitute(file, "^/", "", "")
  let file = escape(file, "/")
  call feedkeys(" gsc " . ":sleep 500m\<CR>" . ":call GitDiffToolACommmit()\<CR>" . "/" . file . "\<CR>" . "\<CR>" . lineno ."\<CR>")
endfunction
" nmap <silent> <Leader>gdc :call GitDiffToolACommmit()<CR>
nmap <silent> <Leader>gdc :call GoToCommitAndDiffThisFile()<CR>

fu! GitToolDiffBranch(branch)
  let branch = a:branch
  if len(branch) == 0
    let branch = "HEAD"
  endif
  silent exe '!git diff --name-status "' . branch . '">.tmp.gitdiff'
  exe "tabnew"
  exe 'view .tmp.gitdiff'
  call SetGitToolDiffMenu(branch)
endf
command! -bar -bang -nargs=* -complete=customlist,fugitive#CompleteObject GitToolDiffBranch call GitToolDiffBranch(<q-args>)
nmap <Leader>gtd :GitToolDiffBranch<SPACE>

fu! SetGitToolDiffMenu(branch)
  setlocal nomodifiable
  exe 'let b:bbranch="' . a:branch . '"'
  nmap <buffer> <silent> <CR> :call GitToolDiffFileInternal(getline('.'), b:bbranch)<CR>
endf

fu! NextGTDFile()
  call feedkeys(" qj\<CR>")
endf
fu! PrevGTDFile()
  call feedkeys(" qk\<CR>")
endf
fu! GitToolDiffFileInternal(change, branch)
  let changes = split(a:change)
  let ct = changes[0]
  let ff = changes[1]
  exe "tabedit " . ff
  exe "Gvdiffsplit " . a:branch
  nmap <silent> <buffer> <leader>q :windo bd<CR>
  nmap <buffer> <silent> <CR> G
  nmap <buffer> <C-n> :call NextGTDFile()<CR>
  nmap <buffer> <C-p> :call PrevGTDFile()<CR>

  exe "wincmd l"
  if len(changes) == 3
    let nff = changes[2]
    exe "e " . nff
    exe "windo diffthis"
  endif
  nmap <silent> <buffer> <leader>q :windo bd<CR>
  nmap <buffer> <silent> <CR> G
  nmap <buffer> <C-n> :call NextGTDFile()<CR>
  nmap <buffer> <C-p> :call PrevGTDFile()<CR>
endf

" diff two random branchs not current branch
fu! SetGitToolDiffMenu2Branch(abranch, bbranch)
  setlocal nomodifiable
  exe 'let b:abranch="' . a:abranch . '"'
  exe 'let b:bbranch="' . a:bbranch . '"'
  nmap <buffer> <silent> <CR> :call GitToolDiffFile2Branch(getline('.'), b:abranch, b:bbranch)<CR>
endf

fu! GitToolDiffFile2Branch(change, abranch, bbranch)
  let ff = split(a:change)[1]
  exe "Git difftool --no-prompt " . a:bbranch . " " . a:abranch . " -- " . ff
  nmap <buffer> <silent> <leader>q :windo bd<CR>
  nmap <buffer> <silent> <CR> G
  nmap <buffer> <C-n> :call NextGTDFile()<CR>
  nmap <buffer> <C-p> :call PrevGTDFile()<CR>
  exe "wincmd l"
  nmap <buffer> <silent> <leader>q :windo bd<CR>
  nmap <buffer> <silent> <CR> G
  nmap <buffer> <C-n> :call NextGTDFile()<CR>
  nmap <buffer> <C-p> :call PrevGTDFile()<CR>
endf
