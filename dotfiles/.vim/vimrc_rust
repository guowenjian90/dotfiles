let g:rust_use_custom_ctags_defs = 1  " if using rust.vim
let g:tagbar_type_rust = {
  \ 'ctagstype' : 'rust',
  \ 'ctagsbin' : '/home/wenjian/.local/bin/ctags',
  \ 'kinds' : [
      \ 'n:modules',
      \ 's:structures:1',
      \ 'i:interfaces',
      \ 'c:implementations',
      \ 'f:functions:1',
      \ 'g:enumerations:1',
      \ 't:type aliases:1:0',
      \ 'C:constants:1:0',
      \ 'M:macros:1',
      \ 'm:fields:1:0',
      \ 'e:enum variants:1:0',
      \ 'P:methods:1',
  \ ],
  \ 'sro': '::',
  \ 'kind2scope' : {
      \ 'n': 'module',
      \ 's': 'struct',
      \ 'i': 'interface',
      \ 'c': 'implementation',
      \ 'f': 'function',
      \ 'g': 'enum',
      \ 't': 'typedef',
      \ 'v': 'variable',
      \ 'M': 'macro',
      \ 'm': 'field',
      \ 'e': 'enumerator',
      \ 'P': 'method',
  \ },
\ }

command! CargoBuild :call <SID>cargo_build()
command! CargoRun :call <SID>cargo_run()
command! CargoPromptArgs :call <SID>cargo_prompt_args()
command! CargoTestAll :call <SID>cargo_test_all()
command! CargoBenchAll :call <SID>cargo_bench_all()
command! CargoUnitTestCurrentFile :call <SID>cargo_unittest_current_file()
command! CargoUnitTestFocused :call <SID>cargo_unittest_focused()

fu! s:current_rust_package_root()
  let savedir = getcwd()
  let dir = expand('%:p:h')
  exe "cd " . dir
  while (dir != '/')
    let configfile = dir . '/' . "cargo.toml"
    if filereadable(configfile)
      break
    endif
    cd ..
    let dir = getcwd()
  endw
  exe "cd " savedir
  return dir
endf

function! s:shell_command_seperator()
  if empty(matchstr($SHELL, 'fish'))
    return '&&'
  else
    return '; and'
  endif
endfunction

let s:separator = <SID>shell_command_seperator()

function! s:cargo_build()
  let project_root = <SID>current_rust_package_root()
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo build')
endfunction

function! s:cargo_run()
  let project_root = <SID>current_rust_package_root()
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo run')
endfunction

function! s:cargo_prompt_args()
  let project_root = <SID>current_rust_package_root()
  let l:args = input(VimuxOption('VimuxPromptString'))
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo run -- ' . l:args)
endfunction

function! s:cargo_test_all()
  let project_root = <SID>current_rust_package_root()
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo build; cargo test -- --color always --nocapture')
endfunction

function! s:cargo_bench_all()
  let project_root = <SID>current_rust_package_root()
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo bench')
endfunction

function! s:cargo_unittest_current_file()
  call CargoRunTests('')
endfunction

function! s:cargo_unittest_focused()
  let test_line = search('#[test', 'Wnbc')

  if test_line ==# 0
    call CargoRunTests('')
    return
  endif

  let line = getline(test_line + 1)
  let test_name_raw = split(line, ' ')[1]
  let test_name = split(test_name_raw, '(')[0]

  call CargoRunTests(test_name)
endfunction

function! CargoRunTests(test_name)
  let project_root = <SID>current_rust_package_root()
  let path = expand('%:r')
  if match(path, '^src/') != -1
    let parts = split(path, '/')
    " let filtered_parts = filter(parts, 'v:val !~# "mod" && v:val !~# "src"')
    let filtered_parts = parts[1:]
    let module_path = join(filtered_parts, '::')

    if module_path ==# 'lib' || module_path ==# 'main'
      call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo test -- --color always --nocapture tests::' . a:test_name)
    else
      call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo test -- --color always --nocapture ' . module_path . '::tests::' . a:test_name)
    endif
  endif
endfunction

autocmd filetype rust nmap <Leader>bb :CargoTestAll<CR>
autocmd filetype rust nmap <Leader>tt :CargoUnitTestFocused<CR>
autocmd filetype rust nmap <Leader>ta :CargoUnitTestCurrentFile<CR>
autocmd filetype rust imap <c-c> {:?}
