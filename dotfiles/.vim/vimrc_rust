command! CargoBuild :call CargoBuild()
command! CargoRun :call CargoRun()
command! CargoPromptArgs :call CargoPromptArgs()
command! CargoTestAll :call CargoTestAll()
command! CargoBenchAll :call CargoBenchAll()
command! CargoUnitTestCurrentFile :call CargoUnitTestCurrentFile()
command! CargoUnitTestFocused :call CargoUnitTestFocused()

fu! CurrentRustPackagePath()
  let savedir = getcwd()
  let dir = expand('%:p:h')
  exe "cd " . dir
  while (dir != '/')
    let configfile = dir . '/' . "cargo.toml"
    if filereadable(configfile)
      break
    endif
    cd ..
    let dir = getcwd()
  endw
  exe "cd " savedir
  return dir
endf

function! ShellCommandSeperator()
  if empty(matchstr($SHELL, 'fish'))
    return '&&'
  else
    return '; and'
  endif
endfunction

let s:separator = ShellCommandSeperator()

function! CargoBuild()
  let project_root = CurrentRustPackagePath()
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo build')
endfunction

function! CargoRun()
  let project_root = CurrentRustPackagePath()
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo run')
endfunction

function! CargoPromptArgs()
  let project_root = CurrentRustPackagePath()
  let l:args = input(VimuxOption('VimuxPromptString'))
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo run -- ' . l:args)
endfunction

function! CargoTestAll()
  let project_root = CurrentRustPackagePath()
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo test -- --color always --nocapture')
endfunction

function! CargoBenchAll()
  let project_root = CurrentRustPackagePath()
  call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo bench')
endfunction

function! CargoUnitTestCurrentFile()
  call CargoRunTests('')
endfunction

function! CargoUnitTestFocused()
  let test_line = search('#[test', 'Wnbc')

  if test_line ==# 0
    call CargoRunTests('')
    return
  endif

  let line = getline(test_line + 1)
  let test_name_raw = split(line, ' ')[1]
  let test_name = split(test_name_raw, '(')[0]

  call CargoRunTests(test_name)
endfunction

function! CargoRunTests(test_name)
  let project_root = CurrentRustPackagePath()
  let path = expand('%:r')
  if match(path, '^src/') != -1
    let parts = split(path, '/')
    " let filtered_parts = filter(parts, 'v:val !~# "mod" && v:val !~# "src"')
    let filtered_parts = parts[1:]
    let module_path = join(filtered_parts, '::')

    if module_path ==# 'lib' || module_path ==# 'main'
      call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo test -- --color always --nocapture tests::' . a:test_name)
    else
      call VimuxRunCommand('cd ' . project_root . ';clear ' . s:separator . ' cargo test -- --color always --nocapture ' . module_path . '::tests::' . a:test_name)
    endif
  endif
endfunction

autocmd filetype rust nmap <Leader>bb :CargoTestAll<CR>
autocmd filetype rust nmap <Leader>tt :CargoUnitTestFocused<CR>
autocmd filetype rust nmap <Leader>ta :CargoUnitTestCurrentFile<CR>
autocmd filetype rust imap <c-c> ::
