" gdb option
" set previewheight=12               " set gdb window initial height
" run macros/gdb_mappings.vim        " source key mappings listed in this
" set asm=0                          " don't show any assembly stuff
" set gdbprg=gdb_invocation          " set GDB invocation string (default 'gdb')

" cscope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   's'   symbol: find all references to the token under cursor
"   'g'   global: find global definition(s) of the token under cursor
"   'c'   calls:  find all calls to the function name under cursor
"   't'   text:   find all instances of the text under cursor
"   'e'   egrep:  egrep search for the word under cursor
"   'f'   file:   open the filename under cursor
"   'i'   includes: find files that include the filename under cursor
"   'd'   called: find functions that function under cursor calls
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
  set cscopequickfix=s-,c-,d-,i-,t-,e-,g-,f-   " useful for cscope in quickfix
  set csprg=cscope
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
    cs add cscope.out
  endif
  set csverb
  set cscopetag
  "set cscopequickfix=s-,g-,c-,d-,t-,e-,f-,i-
  set cscopequickfix=
  nmap <C-[>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>g :cs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>c :cs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>t :cs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>e :cs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-[>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-[>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-[>d :cs find d <C-R>=expand("<cword>")<CR><CR>
  " nmap <C-[>r :cs reset<CR><CR>
  nmap <C-[>r :!sh ./cscope.sh<CR>
endif

"Functions
fu! CscopeAdd() " Add Cscope database named .cscope.out
  let dir = getcwd()
  let savedir = getcwd()
  wh (dir != '/')
    let scopefile = dir . '/' . ".cscope.out"
    if filereadable(scopefile)
      exe "cs add " scopefile
      exe "cd " savedir
      return dir
    en
    cd ..
    let dir = getcwd()
  endw
  exe "cd " savedir
endf
