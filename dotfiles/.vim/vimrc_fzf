let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val, "lnum": 1 }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" search
" let g:ag_prg='ag -S --nocolor --nogroup --column '
command! -bang -nargs=* AgWithExt call fzf#vim#ag_raw(<q-args>, fzf#vim#with_preview(), <bang>0)
fu! s:search_with_ag(text, extension)
  let stxt = a:text
  if stxt == ''
    let stxt = expand('<cword>')
  endif
  if(a:extension == '')
    execute 'Ag ' . stxt . ''
  else
    execute 'AgWithExt -G "^.*\.' . a:extension. '$" ' . stxt . ''
  end
endf
nmap <silent> <Leader>ss :call <SID>search_with_ag(GetInput("search: to search word under cursor, RETURN"), GetInput("file type:")) <CR>
vmap <silent> <Leader>ss :call <SID>search_with_ag(getline('.')[getpos("'<")[2]-1:getpos("'>")[2]-1], GetInput("file type:")) <CR>

fu! s:search_in_buffer(text)
    execute 'Lines ' . a:text
endf
nmap <silent> <Leader>sb :call <SID>search_in_buffer(GetInput("search:")) <CR>

command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--preview-window=hidden', '--bind=ctrl-/:toggle-preview']}, <bang>0)
command! -bang -nargs=? -complete=dir Buffers
    \ call fzf#vim#buffers(<q-args>, {'options': ['--preview-window=hidden', '--bind=ctrl-/:toggle-preview']}, <bang>0)
command! -bang -nargs=? -complete=dir History
    \ call fzf#vim#history({'options': ['--preview-window=hidden', '--bind=ctrl-/:toggle-preview']}, <bang>0)
nmap <silent> <Leader>og :Tags<CR>
" nmap <silent> <Leader>oo :BTags<CR>
nmap <silent> <Leader>of :Files<CR>
nmap <silent> <Leader>ob :Buffers<CR>
nmap <silent> <Leader>oh :History<CR>
" nmap <silent> <Leader>oc :Commands<CR>
nmap <silent> <Leader>om :Marks<CR>
nmap <Leader>olc :Commits<SPACE>
nmap <silent> <Leader>olb :BCommits<CR>
command! -bar -bang -nargs=* -range=% -complete=customlist,fugitive#CompleteObject Commits let b:fzf_winview = winsaveview() | <line1>,<line2>call fzf#vim#commits(<q-args>, fzf#vim#with_preview({ "placeholder": "" }), <bang>0)

function GoTo(jumpline)
  let values = split(a:jumpline, ":")
  execute "e ".values[0]
  call cursor(str2nr(values[1]), str2nr(values[2]))
  execute "normal zvzz"
endfunction

function! s:jumps()
  " Get jumps with filename added
  let jumps = map(reverse(copy(getjumplist()[0])), { key, val -> extend(val, {'name': getbufinfo(val.bufnr)[0].name }) })
  " let jumps = map(filter(reverse(copy(getjumplist()[0])), {key, val -> val.filename =~ "__Tagbar__"}), { key, val -> extend(val, {'name': getbufinfo(val.bufnr)[0].name }) })
  let jumptext = map(copy(jumps), { index, val -> (val.name).':'.(val.lnum).':'.(val.col+1).': '.GetLine(val.bufnr, val.lnum) })
  call fzf#run(fzf#vim#with_preview(fzf#wrap({ 'source': jumptext, 'column': 1, 'options': ['--delimiter', ':', '--preview-window=hidden', '--bind', 'ctrl-a:select-all,ctrl-d:deselect-all'], 'sink': function('GoTo')})))
endfunction
command! Jumps call <SID>jumps()
nmap <silent> <Leader>oj :Jumps<cr>

function! s:changes()
  let changes  = reverse(copy(getchangelist()[0]))
  let changetext = map(copy(changes), { index, val -> expand('%').':'.(val.lnum).':'.(val.col+1).': '.GetLine(bufnr('%'), val.lnum) })
  call fzf#run(fzf#vim#with_preview(fzf#wrap({ 'source': changetext, 'column': 1, 'options': ['--delimiter', ':', '--preview-window=hidden', '--bind', 'ctrl-a:select-all,ctrl-d:deselect-all'], 'sink': function('GoTo')})))
endfunction
command! Changes call <SID>changes()
nmap <silent> <Leader>oc :Changes<cr>

