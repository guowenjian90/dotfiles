" let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
" let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'
"
" if you want to disable auto detect, comment out those two lines
"let g:airline#extensions#disable_rtp_load = 1
"let g:airline_extensions = ['branch', 'hunks', 'coc']

" turn off ale for coc supported language
let g:ale_pattern_options = {
      \   '.*\.java$': {'ale_enabled': 0},
      \   '.*\.scala$': {'ale_enabled': 0},
      \}

let g:coc_fzf_preview_available = 1
let g:coc_fzf_preview = ''
let g:coc_fzf_opts = []
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

let g:coc_default_semantic_highlight_groups = 1

" coc
set statusline+=%{coc#status()}
" if hidden is not set, TextEdit might fail.
set hidden

" Some server have issues with backup files, see #649
set nobackup
set nowritebackup

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

autocmd filetype java let b:coc_root_patterns = ['.classpath']
autocmd filetype scala let b:coc_root_patterns = ['build.sbt']

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
function! Check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ Check_back_space() ? "\<TAB>" :
      \ coc#refresh()

let g:coc_git_hide_blame_virtual_text = 1
function! ToggleGitBlame()
  let g:coc_git_hide_blame_virtual_text = !get(g:, 'coc_git_hide_blame_virtual_text', 0)
endfunction
nmap <silent> <leader>blame :call ToggleGitBlame()<CR>

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <silent><expr> <C-l> coc#pum#visible() ? "\<Esc>a" : "\<Right>"
inoremap <silent><expr> <C-h> coc#pum#visible() ? "\<Esc>a" : "\<Left>"

" Use K for show documentation in preview window
nmap ` K
" nmap ` <ESC><C-]>
nmap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    call feedkeys('K', 'in')
  else
    call CocActionAsync('doHover')
  endif
endfunction

function! s:show_signature()
  call CocActionAsync('showSignatureHelp')
endfunction
imap <F9> <C-o>:call <SID>show_signature()<CR>

autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" jump to next function
nmap <silent> ]] ^vafo<Esc>2j^
nmap <silent> [[ ^vaf<Esc>2kvaf<Esc>^

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <leader>cs <Plug>(coc-range-select)
xmap <silent> <leader>cs <Plug>(coc-range-select)

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('showSignatureHelp')
" autocmd CursorHoldI * silent call CocActionAsync('showSignatureHelp')

" Remap for format selected region
vmap <silent><leader>cf  <Plug>(coc-format-selected)
nmap <silent><leader>cf  <Plug>(coc-format-selected)

" Use `:Format` for format current buffer
command! -nargs=0 CocFormat :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? CocFold :call CocAction('fold', <f-args>)


" Add diagnostic info for https://github.com/itchyny/lightline.vim
" let g:lightline = {
"       \ 'colorscheme': 'wombat',
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste' ],
"       \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
"       \ },
"       \ 'component_function': {
"       \   'cocstatus': 'coc#status'
"       \ },
"       \ }



" Using CocFzfList
nmap <silent> <Leader>coc :<C-u>CocFzfList<cr>
nmap <silent> <Leader>ox  :<C-u>CocFzfList commands<cr>
nmap <silent> <Leader>oo  :<C-u>CocFzfList outline<cr>
nmap <silent> <Leader>olo :<C-u>CocFzfList location<cr>
nmap <silent> <Leader>od  :<C-u>CocFzfList diagnostics<cr>
nmap <silent> <Leader>oe  :call <SID>coc_open_error()<cr>
nmap <silent> <Leader>clb :<C-u>CocFzfList branches<cr>
nmap <silent> <Leader>cle :<C-u>CocFzfList extensions<cr>
function! s:coc_open_error()
  exe "CocFzfList diagnostics"
  call feedkeys("'\\ Error\\ ")
endf

" Remap keys for go to
fu! s:coc_show_reference()
  call EasyMotion#WB(0,2)
  call feedkeys("gr")
endf

fu! s:coc_show_implementation()
  call EasyMotion#WB(0,2)
  call feedkeys("gi")
endf

fu! s:coc_next_error()
  if HasQuickFix() == 1
    exe "cnext"
  elseif HasLocList() == 1
    exe "lnext"
  else
    call feedkeys("]e")
    " exe "CocNext"
  endif
endf

fu! s:coc_prev_error()
  if HasQuickFix() == 1
    exe "cprev"
  elseif HasLocList() == 1
    exe "lprev"
  else
    call feedkeys("[e")
    " exe "CocPrev"
  endif
endf

for ft in ['java', 'scala', 'go', 'rust', 'python', 'javascript', 'typescript']
  exe 'autocmd filetype ' . ft . ' nmap <silent> <C-d> <Plug>(coc-diagnostic-next)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> <C-n> :call <SID>coc_next_error()<CR>'
  exe 'autocmd filetype ' . ft . ' nmap <silent> <C-p> :call <SID>coc_prev_error()<CR>'
  exe 'autocmd filetype ' . ft . ' nmap <silent> <C-]> <Plug>(coc-definition)'
  " Use vd for show documentation in preview window
  exe 'autocmd filetype ' . ft . ' nmap <silent><nowait> vd :call CocAction("jumpDefinition", v:false)<CR>'
  exe 'autocmd filetype ' . ft . ' nmap <silent> gd <Plug>(coc-definition)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> gi <Plug>(coc-implementation)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> gr <Plug>(coc-references)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> gy <Plug>(coc-type-definition)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> mr :call <SID>coc_show_reference()<CR>'
  exe 'autocmd filetype ' . ft . ' nmap <silent> mi :call <SID>coc_show_implementation()<CR>'
  exe 'autocmd filetype ' . ft . ' nmap <silent> <leader>oi :CocCommand editor.action.organizeImport <CR>'

  exe 'autocmd filetype ' . ft . ' nmap <silent> [e <Plug>(coc-diagnostic-prev-error)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> ]e <Plug>(coc-diagnostic-next-error)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> [d <Plug>(coc-diagnostic-prev)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> ]d <Plug>(coc-diagnostic-next)'

  " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
  exe 'autocmd filetype ' . ft . ' vmap <silent><leader>cv  <Plug>(coc-codeaction-selected)'

  " Remap for do codeAction of current line
  exe 'autocmd filetype ' . ft . ' nmap <silent><leader>ca  <Plug>(coc-codeaction)'

  " Fix autofix problem of current line
  exe 'autocmd filetype ' . ft . ' nmap <silent><leader>cx  <Plug>(coc-fix-current)'

  " Remap keys for applying code actions at the cursor position
  exe 'autocmd filetype ' . ft . ' nmap <leader>cc  <Plug>(coc-codeaction-cursor)'

  " Remap keys for apply code actions affect whole buffer
  " nmap <leader>cb  <Plug>(coc-codeaction-source)

  " Remap keys for applying refactor code actions

  exe 'autocmd filetype ' . ft . ' nmap <silent><leader>cr <Plug>(coc-codeaction-refactor)'
  exe 'autocmd filetype ' . ft . ' vmap <silent><leader>cr <Plug>(coc-codeaction-refactor-selected)'
   
  " Run the Code Lens action on the current line
  exe 'autocmd filetype ' . ft . ' nmap <leader>cl <Plug>(coc-codelens-action)'

  " Remap for rename current word
  exe 'autocmd filetype ' . ft . ' nmap <silent><leader>cn <Plug>(coc-rename)'

  " Introduce function text object
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  exe 'autocmd filetype ' . ft . ' xmap if <Plug>(coc-funcobj-i)'
  exe 'autocmd filetype ' . ft . ' xmap af <Plug>(coc-funcobj-a)'
  exe 'autocmd filetype ' . ft . ' omap if <Plug>(coc-funcobj-i)'
  exe 'autocmd filetype ' . ft . ' omap af <Plug>(coc-funcobj-a)'
  exe 'autocmd filetype ' . ft . ' xmap io <Plug>(coc-classobj-i)'
  exe 'autocmd filetype ' . ft . ' omap io <Plug>(coc-classobj-i)'
  exe 'autocmd filetype ' . ft . ' xmap ao <Plug>(coc-classobj-a)'
  exe 'autocmd filetype ' . ft . ' omap ao <Plug>(coc-classobj-a)'
endfor

for ft in ['json', 'typescript']
  exe 'autocmd filetype ' . ft . ' nmap <silent> <C-d> <Plug>(coc-diagnostic-next)'
  exe 'autocmd filetype ' . ft . ' nmap <silent> <C-n> :call <SID>coc_next_error()<CR>'
  exe 'autocmd filetype ' . ft . ' nmap <silent> <C-p> :call <SID>coc_prev_error()<CR>'
endfor

autocmd filetype java nmap <silent> <leader>pb :CocCommand java.workspace.compile <CR>
autocmd filetype java nmap <silent> <leader>pr :CocCommand java.clean.workspace <CR>
autocmd filetype java nmap <silent> <leader>sm :CocCommand java.super-method-hierarchy <CR>
autocmd filetype java nmap <silent> <leader>mh :CocCommand java.super-method-hierarchy <CR>
" autocmd filetype java nmap <leader>oi :CocCommand java.action.organizeImports <CR>

autocmd filetype sbt nmap <silent> <leader>pi :CocCommand metals.build-import <CR>
autocmd filetype sbt nmap <silent> <leader>pr :CocCommand metals.build-restart <CR>
autocmd filetype sbt nmap <silent> <leader>pc :CocCommand metals.build-connect <CR>

autocmd filetype scala nmap <silent> <leader>pi :CocCommand metals.build-import <CR>
autocmd filetype scala nmap <silent> <leader>pr :CocCommand metals.build-restart <CR>
autocmd filetype scala nmap <silent> <leader>pb :CocCommand metals.compile-cascade <CR>
autocmd filetype scala nmap <silent> <leader>pc :CocCommand metals.build-connect <CR>
autocmd filetype scala nmap <silent> <leader>nc :CocCommand metals.new-scala-file <CR>
autocmd filetype scala nmap <silent> <leader>sm :CocCommand metals.go-to-super-method <CR>
autocmd filetype scala nmap <silent> <leader>mh :CocCommand metals.super-method-hierarchy <CR>

" Toggle panel with Tree Views
" autocmd filetype scala nmap <silent> <Leader>mws <Plug>(coc-metals-expand-decoration)
" autocmd filetype scala nmap <silent> <Leader>mt :<C-u>CocCommand metals.tvp<CR>
" autocmd filetype scala nmap <silent> <Leader>mtb :<C-u>CocCommand metals.tvp metalsBuild<CR>
" autocmd filetype scala nmap <silent> <Leader>mtc :<C-u>CocCommand metals.tvp metalsCompile<CR>
" autocmd filetype scala nmap <silent> <Leader>mtf :<C-u>CocCommand metals.revealInTreeView metalsBuild<CR>

autocmd filetype go nmap <silent> <leader>ut :CocCommand go.test.toggle <CR>
autocmd filetype go nmap <silent> <leader>tg :CocCommand go.tags.add.prompt<CR>


" Use <C-s> for trigger snippet expand.
imap <C-s> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
" vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
" let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
" let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
" imap <C-j> <Plug>(coc-snippets-expand-jump)
"

" coc-git
nmap <silent> [c <Plug>(coc-git-prevchunk)
nmap <silent> ]c <Plug>(coc-git-nextchunk)
nmap <silent> <C-c> <Plug>(coc-git-nextchunk)
" nmap <silent> [c <Plug>(coc-git-prevConflict)
" nmap <silent> ]f <Plug>(coc-git-nextConflict)
" show chunk diff at current position
nmap <silent> = :CocCommand git.chunkInfo<CR>
nmap <silent> gu :CocCommand git.chunkUndo<CR>
nmap <silent> <leader>git :CocCommand git.browserOpen<CR>
" show commit contains current position
nmap <silent> <leader>gc <Plug>(coc-git-commit)
" create text object for git chunks
omap <leader>gi <Plug>(coc-git-chunk-inner)
xmap <leader>gi <Plug>(coc-git-chunk-inner)
omap <leader>ga <Plug>(coc-git-chunk-outer)
xmap <leader>ga <Plug>(coc-git-chunk-outer)

highlight link EchoDocPopup markdown
highlight link CocPumFloatingDetail markdown
highlight CocPumFloatingDetail ctermbg=darkblue guibg=darkblue

highlight CocHoverRange ctermbg=black guibg=black
highlight CocFloating ctermbg=black guibg=black
highlight CocInlayHint cterm=underline gui=underline guifg=blue guibg=black
highlight CocUnusedHighlight cterm=underline gui=underline guifg=blue guibg=black
highlight CocMenuSel ctermbg=blue guibg=blue
highlight CocListLine cterm=underline gui=underline
highlight CocSelectedLine cterm=underline gui=underline

if has('nvim-0.4.0') || has('patch-8.2.0750')
  let g:cj_orig_n = maparg('<c-j>', 'n')
  let g:ck_orig_n = maparg('<c-k>', 'n')
  " let g:cj_orig_v = maparg('<c-j>', 'v')
  " let g:ck_orig_v = maparg('<c-k>', 'v')
  nnoremap <silent><nowait><expr> <c-j> coc#float#has_scroll() ? coc#float#scroll(1) : g:cj_orig_n."\<CR>"
  nnoremap <silent><nowait><expr> <c-k> coc#float#has_scroll() ? coc#float#scroll(0) : g:ck_orig_n."\<CR>"
  inoremap <silent><nowait><expr> <Right> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <Left> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  " vnoremap <silent><nowait><expr> <c-j> coc#float#has_scroll() ? coc#float#scroll(1) : g:cj_orig_v."\<CR>"
  " vnoremap <silent><nowait><expr> <c-k> coc#float#has_scroll() ? coc#float#scroll(0) : g:ck_orig_v."\<CR>"
endif
